<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Color wheel</title>
<script src="cc-min.js"></script>
<style>
::-moz-selection { background-color: rgba(255, 255, 255, 0.5); color: #fff; }
::selection { background-color: rgba(255, 255, 255, 0.5); color: #fff; }
document,body { padding: 0; margin: 0; overflow: hidden; font-family: consolas; }
#pointer { position: absolute; width: 8px; height: 8px; border: 2px solid rgba(0,0,0,0.6); border-radius: 8px; top: -8px; left: -8px; pointer-events: none; z-index: 100; }
#ui { position: absolute; color: #eee; right: 0; }
#form { display: inline-block; width: 100vw; }
.left { float: left; }
.right { float: right; }
.modes { width: 120px; text-align: center; border: 1px solid #666; border-radius: 5px; cursor: pointer; color: #bbb; }
.modes:hover { background-color: rgba(255, 255, 255, 0.2); color: #ccc; border: 1px solid #777; }
.active { background-color: rgba(255, 255, 255, 0.3); border: 1px solid #ccc; color: #eee; }
.modes.active:hover { background-color: rgba(255, 255, 255, 0.3); border: 1px solid #ccc; color: #eee; }
.inline { display: inline-block; }
#tag { position: absolute; color: #eee; padding: 3px; font-size: 13px; }
#n { background-color: transparent; color: #eee; border: 1px solid #333; width: 80px; text-align: right; padding-right: 2px; }
#n:focus { border: 1px solid #999; outline: none; }
#n.invalid { background-color: rgba(200, 30, 30, 0.6); box-shadow: 0 0 10px rgba(200, 30, 30, 0.6); }
#button { width: 100px; background-color: #aaa; border: 1px solid #333; color: #222; padding: 2px 10px; cursor: pointer; }
#button:focus { outline: none; }
#button:hover { background-color: #ddd; }
#button.invalid { background-color: #ccc; color: #999; cursor: default; }
#button.invalid:hover { background-color: #ccc; color: #999; }
#c { width: 100vw; height: 100vh }

#color { position: absolute; top: 1px; pointer-events: none; }
.clr { width: 360px; height: 180px; border: 1px solid #333; text-align: center; float: left; overflow: hidden; }
.box { width: 160px; height: 160px; border: 1px solid #333; margin: 9px; float: left; }
.cm { width: 170px; height: auto; border: 1px solid #333; margin: 3px 0 0; float: left; overflow: hidden; }
.cn { width: 170px; height: 20px; border-bottom: 1px solid #333; background-color: rgba(255, 255, 255, 0.1); color: #fff; padding: 0; }
.ck { width: 48px; height: auto; margin: 0 1px; display: inline-block; overflow: hidden; }
.ck.full { width: 100%; border-top: 1px solid #333; }
.ckn { width: 100%; height: 18px; color: #aaa; }
.ckv { width: 100%; height: 18px; overflow: hidden; color: #eee; }
</style>
</head>
<body>
<div id="pointer"></div>
<div id="color"><span></span></div>
<div id="ui">
<form id="form">
<div class="right">
<div class="right"><div id="tag">L:</div><input type="text" id="n" maxlength="6" autofocus /><input type="submit" value="Show Wheel" id="button" title="Computed color wheels will be cached until page reloading."/></div>
<div class="modes right" id="hsv" > HSV(B) </div>
<div class="modes right" id="hsl" > HSL </div>
<div class="modes right" id="lch"> LCH </div>
</div>
</form>
</div>

<canvas id="c" draggable="false"></canvas>
<script>
function setup(){
function $(id){ return document.getElementById(id) }

var mode = "", s = 0, k = "", color = new Color(mode),
    caches = {},
    modes = { lch: {l: 0, c: 1, h: 2, s: 128, d: 50},
              hsl: {l: 2, c: 1, h: 0, s: 100, d: 50},
              hsv: {l: 2, c: 1, h: 0, s: 100, d: 100} },
    default_mode = "lch",
    hs = 1/3, cs = 1, rc = 3/4

var canvas = $("c")
canvas.width = canvas.offsetWidth
canvas.height = canvas.offsetHeight
var cc = canvas.getContext("2d")

function clear_canvas(){
    cc.fillStyle = "#000"
    cc.fillRect( 0, 0, canvas.width, canvas.height )
}

clear_canvas()

var cx = canvas.offsetWidth / 2, cy = canvas.offsetHeight / 2, a = (Math.PI/180)*hs,
    r = Math.min( cx, cy )*rc, rl = Math.PI*r*2/360*hs, rs, l = -1

function change_mode( new_mode ){
    if( new_mode !== mode && modes.hasOwnProperty(new_mode) ){
        mode = new_mode
        k = Color.modes[mode].keys[modes[mode].l]
        $("tag").innerHTML = k.toUpperCase()+":"
        $("n").value = modes[mode].d
        change_title()
        color = new Color(mode)
        s = modes[mode].s
        rs = r/s
        clear_canvas()
        hide_pointer()
    }
}

function set_l(v){
    l = typeof v === "undefined" ? +$("n").value : v
    return l
}

function checkN(){
    var scale = Color.modes[mode][k], ll = +$("n").value
    if( isNaN(ll) || !Color.math.validate(ll, scale.max, scale.min, 0) ){
        add_class( $("n"), "invalid" )
        return 0
    }else{
        remove_class( $("n"), "invalid" )
        if( load_cache( mode, ll ) ){
            return 2
        }
        return 1
    }
}

function change_mode_event(e){
    if(!drawing){
        if(mode){ remove_class( $(mode), "active" ) }
        change_mode(this.id)
        add_class( this, "active" )
        l = -1
        checkN()
    }
}

function button_ctrl(){
    if(drawing){
        $("n").disabled = true
        $("button").disabled = true
        $("button").value = "Rendering"
        add_class($("button"), "invalid")
        return false
    }else{
        $("n").disabled = false
        $("button").disabled = false
        $("button").value = "Show Wheel"
        remove_class($("button"), "invalid")
        focus()
        return true
    }
}

function focus(){
    $("n").focus()
    $("n").select()
}

function draw_point( c ){
    color[modes[mode].c] = c
    var rh = (4/7+c/s)
    cc.fillStyle = color.hex()
    cc.fillRect( c*rs, -rl*rh/2, rs*cs/rc, rl*rh )
}

function draw_line( h ){
    color[modes[mode].h] = h
    for( var c = 0; c <= s; c += cs ){
        draw_point( c )
    }
    cc.fillStyle = "#000"
    cc.fillRect( c*rs, -rl, rs*cs/rc, rl*2 )
}

var drawing = false
function draw_wheel( from, to ){

    function draw( hfrom, hto ){
        if( hfrom < hto ){
            draw_line( hfrom )
            cc.rotate(-a)
            setTimeout( draw.bind(null,hfrom+hs,hto), 3 )
        }else{
            cc.fillStyle = "#000"
            cc.fillRect( (s+cs)*rs, -rl*2, rs*cs/rc, rl*4 )
            cc.rotate(a*360/hs)
            cc.translate(-cx, -cy)
            drawing = false
            change_title("key")
            save_cache()
        }
    }
    
    function check_button(){
        if( !button_ctrl() ){ setTimeout( check_button, 100 ) }
    }

    var h = from
    drawing = true
    hide_pointer()
    clear_canvas()
    cc.translate(cx, cy)
    color[modes[mode].l] = l
    change_title("render")
    check_button()
    draw( from, to )
}

function render(){
    if(checkN() === 1){
        set_l()
        draw_wheel( 0, 360 )
    }else{
        focus()
    }
    return false
}

function get_value(e){
    e.preventDefault()
    if( l > -1 ){
        var x = e.clientX - cx, y = e.clientY - cy, vr = Math.sqrt(Math.pow(x,2)+Math.pow(y,2)),
            h = (360-Math.atan2(y, x)/Math.PI*180) % 360, c = Math.min(vr/r*s, s), cr = new Color(mode)
        cr[modes[mode].l] = l
        cr[modes[mode].c] = c
        cr[modes[mode].h] = h
        cr.truncate(0.1)
        if( vr < r + 5 ){
            show_color( cr )
            pointer_color( cr.grayscale()[0] )
            move_pointer( e.clientX, e.clientY )
        }
    }else{
        hide_pointer()
    }
}

function start_detect(e){
    if( e.button === 0 ){
        get_value(e)
        $("c").addEventListener( "mousemove", get_value, false )
        $("c").addEventListener( "mouseup", end_detect, false )
        $("c").addEventListener( "mouseout", end_detect, false )
    }
}
function end_detect(e){
    $("c").removeEventListener( "mousemove", get_value )
    $("c").removeEventListener( "mouseup", end_detect )
    $("c").removeEventListener( "mouseout", end_detect )
}

function move_pointer( x, y ){
    $("pointer").style.top = (y-$("pointer").offsetHeight/2)+"px"
    $("pointer").style.left = (x-$("pointer").offsetWidth/2)+"px"
}

function hide_pointer(){
    $("pointer").style.top = (-$("pointer").offsetHeight)+"px"
    $("pointer").style.left = (-$("pointer").offsetWidth)+"px"
}

function pointer_color(g){
    if( g > 1/4 ){
        $("pointer").style.border = "2px solid rgba(0,0,0,0.6)"
    }else{
        $("pointer").style.border = "2px solid rgba(255,255,255,0.4)"
    }
}

function save_cache(){
    if( !caches.hasOwnProperty(mode) ){ caches[mode] = {} }
    caches[mode][l] = cc.getImageData(0, 0, canvas.width, canvas.height)
}

function load_cache( m, ll ){
    if( caches.hasOwnProperty(m) && caches[m].hasOwnProperty(ll) ){
        cc.putImageData(caches[m][ll], 0, 0)
        set_l(ll)
        change_title("key")
        hide_pointer()
        return true
    }
    return false
}

function add_class( dom, cls ){
    remove_class( dom, cls )
    dom.className += " " + cls
}

function remove_class( dom, cls ){
    dom.className = dom.className.replace( RegExp("\s*" + cls + "\s*", "g"), " " ).trim()
}

function change_title( type ){
    document.title = mode.toUpperCase() + " wheel"
    switch( type ){
    case "render":
        document.title += " (rendering...)"
    break
    case "key":
        document.title += " ("+k.toUpperCase()+"="+l+")"
    break
    }
}

function show_color( cr ){    
    var dom = document.createElement("div")
    dom.className = "clr"
    dom.appendChild(document.createElement("div"))
    dom.firstChild.className = "box"
    dom.firstChild.style.backgroundColor = cr.css()
    var mo = document.createElement("div")
    mo.className = "cm"
    mo.appendChild(document.createElement("div"))
    mo.firstChild.className = "cn"
    mo.firstChild.textContent = mode.toUpperCase()
    for( var i = 0; i < Color.modes[mode].keys.length; i++ ){
        var tmp = document.createElement("div")
        tmp.className = "ck"
        tmp.appendChild(document.createElement("div"))
        tmp.appendChild(document.createElement("div"))
        tmp.firstChild.className = "ckn"
        tmp.firstChild.textContent = Color.modes[mode].keys[i].toUpperCase()
        tmp.lastChild.className = "ckv"
        tmp.lastChild.textContent = cr[i]
        mo.appendChild(tmp)
    }
    dom.appendChild(mo)
    var rgb = document.createElement("div"), crgb = cr.rgb()
    rgb.className = "cm"
    rgb.appendChild(document.createElement("div"))
    rgb.firstChild.className = "cn"
    rgb.firstChild.textContent = "RGB"
    for( i = 0; i < Color.modes.rgb.keys.length; i++ ){
        tmp = document.createElement("div")
        tmp.className = "ck"
        tmp.appendChild(document.createElement("div"))
        tmp.appendChild(document.createElement("div"))
        tmp.firstChild.className = "ckn"
        tmp.firstChild.textContent = Color.modes.rgb.keys[i].toUpperCase()
        tmp.lastChild.className = "ckv"
        tmp.lastChild.textContent = crgb[i]
        rgb.appendChild(tmp)
    }
    tmp = document.createElement("div")
    tmp.className = "ck full"
    tmp.appendChild(document.createElement("div"))
    tmp.appendChild(document.createElement("div"))
    tmp.firstChild.className = "ckn"
    tmp.firstChild.textContent = "HEX"
    tmp.lastChild.className = "ckv"
    tmp.lastChild.textContent = crgb.hex()
    rgb.appendChild(tmp)
    dom.appendChild(rgb)
    $("color").replaceChild( dom, $("color").lastChild )
}

$("form").onsubmit = render
$("lch").onclick = change_mode_event
$("hsl").onclick = change_mode_event
$("hsv").onclick = change_mode_event
$("n").onkeyup = checkN
$("c").addEventListener( "mousedown", start_detect, false )

$(default_mode).click()
focus()

}
window.addEventListener( "load", setup, false )
</script>
</body>
</html>